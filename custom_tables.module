<?php

use Drupal\Core\Database\Database;

/**
 * Implements hook_views_data().
 */
function custom_tables_views_data() {
  $dbs = custom_tables_get_database_schemas();
  $data = [];
  // Iterate through each database.
  foreach ($dbs as $dname => $db) {
    // Iterate through each table.
    foreach ($db as $table) {
      if ($table[0] == 'data_entry_form') {
        // Make sure the table name hasn't been used before.
        if (!isset($data[$table[0]])) {
          // Set the title.
          //$title = '[VDC] ' . Html::escape($dname) . ':  ';
          //$title .= Html::escape($table[0]);
          // Setup the table for Views to be able to see it.
          $data[$table[0]]['table']['group'] = $table[0];
          $data[$table[0]]['table']['base'] = [
            // Use the first column's name as the primary field.
            'field' => $table[1][0][1],
            'title' => $table[0],
            'database' => $dname,
            'weight' => -9001,
          ];
          // Add each column to its respective table.
          foreach ($table[1] as $col) {
            if ($col[0] == 'numeric') {
              $data[$table[0]][$col[1]] = [
                'title' => $col[1],
                'help' => $col[1],
                'field' => [
                  'id' => 'numeric',
                ],
                'sort' => [
                  'id' => 'standard',
                ],
                'filter' => [
                  'id' => 'numeric',
                ],
                'argument' => [
                  'id' => 'numeric',
                ],
              ];
            }
            if ($col[0] == 'date') {
              $data[$table[0]][$col[1]] = [
                'title' => $col[1],
                'help' => $col[1],
                'field' => [
                  'id' => 'date',
                ],
                'sort' => [
                  'id' => 'date',
                ],
                'filter' => [
                  'id' => 'date',
                ],
              ];
            }
            if ($col[0] == 'string') {
              $data[$table[0]][$col[1]] = [
                'title' => $col[1],
                'help' => $col[1],
                'field' => [
                  'id' => 'standard',
                ],
                'sort' => [
                  'id' => 'standard',
                ],
                'filter' => [
                  'id' => 'string',
                ],
                'argument' => [
                  'id' => 'string',
                ],
              ];
              if ($col[1] == 'field_year_tax_name' || $col[1] == 'field_state_province_tax_name' || $col[1] == 'field_period_tax_name' || $col[1] == 'name') {
                $data[$table[0]][$col[1]]['filter']['id'] = 'taxonomy_index_tname';
              }
            }
            if ($col[0] == 'broken') {
              $data[$table[0]][$col[1]] = [
                'title' => $col[1],
                'help' => $col[1],
                'field' => [
                  'id' => 'broken',
                ],
                'sort' => [
                  'id' => 'broken',
                ],
                'filter' => [
                  'id' => 'broken',
                ],
                'argument' => [
                  'id' => 'broken',
                ],
              ];
            }
          }
        }
      }
    }
  }

  // Return the finished result, allowing Views to be able to see everything
  // that it needs.
  return $data;
}

/**
 * Gathers appropriate information from each potential database driver type.
 */
function custom_tables_get_database_schemas() {
  $dbs = [];
  $databases = Database::getAllConnectionInfo();
  // Iterate through each of the database configurations.
  foreach ($databases as $key => $datab) {
    // Taking the default database.
    if ($key == 'default') {
      if (strtolower($datab['default']['driver']) == 'mysql') {
        // Add table list to the database list.
        $dbs[$key] = custom_tables_get_database_schema_mysql($key);
      }
    }
  }
  return $dbs;
}


/**
 * Gathers appropriate information from MySQL driver type databases.
 */
function custom_tables_get_database_schema_mysql($key) {
  // Load the appropriate data type groups.
  $types = views_database_connector_get_data_types();
  // Switch to database in question.
  Database::setActiveConnection($key);
  // The database in question.
  $new_db = Database::getConnection('default', $key);
  // Get a list of the tables in this database.
  $tables = $new_db->query('SHOW TABLES;');
  // Switch back to the main database.
  Database::setActiveConnection('default');
  $tablelist = [];
  // Fetch a row, each with a table name.
  while ($row = $tables->fetchAssoc()) {
    // This is the one of two database formats that can have whacky table
    // names due to using information_schema.  We have the ability to
    // check on columns without the PDO table substitution problem.
    foreach ($row as $v) {
      // Switch to database in question.
      Database::setActiveConnection($key);
      // Fetch column names and their data type from said table.
      $q = 'SELECT column_name, data_type FROM ';
      $q .= 'information_schema.columns WHERE table_name = :table;';
      $cols = $new_db->query($q, [':table' => $v]);
      // Switch back to the main database.
      Database::setActiveConnection('default');
      $collist = [];
      // Fetch a row, each with a column name.
      while ($r = $cols->fetchAssoc()) {
        $t = 'broken';
        // Add column to column list.
        if (isset($r['column_name'])) {
          foreach ($types as $type => $matches) {
            foreach ($matches as $match) {
              if (stristr($r['data_type'], $match)) {
                $t = $type;
              }
            }
          }
          $collist[] = [$t, $r['column_name']];
        }
      }
      // Add table and its columns to the table list.
      $tablelist[] = [$v, $collist];
    }
  }

  return $tablelist;
}